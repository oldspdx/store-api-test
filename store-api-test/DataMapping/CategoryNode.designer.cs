#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace store_api_test.DataMapping
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="znode_multifront")]
	public partial class CategoryNodeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertZNodeCategoryNode(ZNodeCategoryNode instance);
    partial void UpdateZNodeCategoryNode(ZNodeCategoryNode instance);
    partial void DeleteZNodeCategoryNode(ZNodeCategoryNode instance);
    #endregion
		
		public CategoryNodeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["znode_multifrontConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryNodeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryNodeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryNodeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryNodeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ZNodeCategoryNode> ZNodeCategoryNodes
		{
			get
			{
				return this.GetTable<ZNodeCategoryNode>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZNodeCategoryNode")]
	public partial class ZNodeCategoryNode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryNodeID;
		
		private System.Nullable<int> _CatalogID;
		
		private int _CategoryID;
		
		private System.Nullable<int> _ParentCategoryNodeID;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Theme;
		
		private string _MasterPage;
		
		private string _CSS;
		
		private System.Nullable<int> _DisplayOrder;
		
		private bool _ActiveInd;
		
		private EntitySet<ZNodeCategoryNode> _ZNodeCategoryNodes;
		
		private EntityRef<ZNodeCategoryNode> _ZNodeCategoryNode1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryNodeIDChanging(int value);
    partial void OnCategoryNodeIDChanged();
    partial void OnCatalogIDChanging(System.Nullable<int> value);
    partial void OnCatalogIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnParentCategoryNodeIDChanging(System.Nullable<int> value);
    partial void OnParentCategoryNodeIDChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    partial void OnMasterPageChanging(string value);
    partial void OnMasterPageChanged();
    partial void OnCSSChanging(string value);
    partial void OnCSSChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnActiveIndChanging(bool value);
    partial void OnActiveIndChanged();
    #endregion
		
		public ZNodeCategoryNode()
		{
			this._ZNodeCategoryNodes = new EntitySet<ZNodeCategoryNode>(new Action<ZNodeCategoryNode>(this.attach_ZNodeCategoryNodes), new Action<ZNodeCategoryNode>(this.detach_ZNodeCategoryNodes));
			this._ZNodeCategoryNode1 = default(EntityRef<ZNodeCategoryNode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryNodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryNodeID
		{
			get
			{
				return this._CategoryNodeID;
			}
			set
			{
				if ((this._CategoryNodeID != value))
				{
					this.OnCategoryNodeIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryNodeID = value;
					this.SendPropertyChanged("CategoryNodeID");
					this.OnCategoryNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogID", DbType="Int")]
		public System.Nullable<int> CatalogID
		{
			get
			{
				return this._CatalogID;
			}
			set
			{
				if ((this._CatalogID != value))
				{
					this.OnCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogID = value;
					this.SendPropertyChanged("CatalogID");
					this.OnCatalogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryNodeID", DbType="Int")]
		public System.Nullable<int> ParentCategoryNodeID
		{
			get
			{
				return this._ParentCategoryNodeID;
			}
			set
			{
				if ((this._ParentCategoryNodeID != value))
				{
					if (this._ZNodeCategoryNode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCategoryNodeIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryNodeID = value;
					this.SendPropertyChanged("ParentCategoryNodeID");
					this.OnParentCategoryNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme", DbType="NVarChar(MAX)")]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterPage", DbType="NVarChar(MAX)")]
		public string MasterPage
		{
			get
			{
				return this._MasterPage;
			}
			set
			{
				if ((this._MasterPage != value))
				{
					this.OnMasterPageChanging(value);
					this.SendPropertyChanging();
					this._MasterPage = value;
					this.SendPropertyChanged("MasterPage");
					this.OnMasterPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS", DbType="NVarChar(MAX)")]
		public string CSS
		{
			get
			{
				return this._CSS;
			}
			set
			{
				if ((this._CSS != value))
				{
					this.OnCSSChanging(value);
					this.SendPropertyChanging();
					this._CSS = value;
					this.SendPropertyChanged("CSS");
					this.OnCSSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveInd", DbType="Bit NOT NULL")]
		public bool ActiveInd
		{
			get
			{
				return this._ActiveInd;
			}
			set
			{
				if ((this._ActiveInd != value))
				{
					this.OnActiveIndChanging(value);
					this.SendPropertyChanging();
					this._ActiveInd = value;
					this.SendPropertyChanged("ActiveInd");
					this.OnActiveIndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZNodeCategoryNode_ZNodeCategoryNode", Storage="_ZNodeCategoryNodes", ThisKey="CategoryNodeID", OtherKey="ParentCategoryNodeID")]
		public EntitySet<ZNodeCategoryNode> ZNodeCategoryNodes
		{
			get
			{
				return this._ZNodeCategoryNodes;
			}
			set
			{
				this._ZNodeCategoryNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZNodeCategoryNode_ZNodeCategoryNode", Storage="_ZNodeCategoryNode1", ThisKey="ParentCategoryNodeID", OtherKey="CategoryNodeID", IsForeignKey=true)]
		public ZNodeCategoryNode ZNodeCategoryNode1
		{
			get
			{
				return this._ZNodeCategoryNode1.Entity;
			}
			set
			{
				ZNodeCategoryNode previousValue = this._ZNodeCategoryNode1.Entity;
				if (((previousValue != value) 
							|| (this._ZNodeCategoryNode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZNodeCategoryNode1.Entity = null;
						previousValue.ZNodeCategoryNodes.Remove(this);
					}
					this._ZNodeCategoryNode1.Entity = value;
					if ((value != null))
					{
						value.ZNodeCategoryNodes.Add(this);
						this._ParentCategoryNodeID = value.CategoryNodeID;
					}
					else
					{
						this._ParentCategoryNodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ZNodeCategoryNode1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ZNodeCategoryNodes(ZNodeCategoryNode entity)
		{
			this.SendPropertyChanging();
			entity.ZNodeCategoryNode1 = this;
		}
		
		private void detach_ZNodeCategoryNodes(ZNodeCategoryNode entity)
		{
			this.SendPropertyChanging();
			entity.ZNodeCategoryNode1 = null;
		}
	}
}
#pragma warning restore 1591
